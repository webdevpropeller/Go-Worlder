// Code generated by MockGen. DO NOT EDIT.
// Source: usecase/repository/account_repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	gomock "github.com/golang/mock/gomock"
	model "go_worlder_system/domain/model"
	reflect "reflect"
)

// MockAccountRepository is a mock of AccountRepository interface
type MockAccountRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAccountRepositoryMockRecorder
}

// MockAccountRepositoryMockRecorder is the mock recorder for MockAccountRepository
type MockAccountRepositoryMockRecorder struct {
	mock *MockAccountRepository
}

// NewMockAccountRepository creates a new mock instance
func NewMockAccountRepository(ctrl *gomock.Controller) *MockAccountRepository {
	mock := &MockAccountRepository{ctrl: ctrl}
	mock.recorder = &MockAccountRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAccountRepository) EXPECT() *MockAccountRepositoryMockRecorder {
	return m.recorder
}

// FindAccountNameList mocks base method
func (m *MockAccountRepository) FindAccountNameList() ([]model.AccountName, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAccountNameList")
	ret0, _ := ret[0].([]model.AccountName)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAccountNameList indicates an expected call of FindAccountNameList
func (mr *MockAccountRepositoryMockRecorder) FindAccountNameList() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAccountNameList", reflect.TypeOf((*MockAccountRepository)(nil).FindAccountNameList))
}

// FindAccountNameByID mocks base method
func (m *MockAccountRepository) FindAccountNameByID(id string) (*model.AccountName, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAccountNameByID", id)
	ret0, _ := ret[0].(*model.AccountName)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAccountNameByID indicates an expected call of FindAccountNameByID
func (mr *MockAccountRepositoryMockRecorder) FindAccountNameByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAccountNameByID", reflect.TypeOf((*MockAccountRepository)(nil).FindAccountNameByID), id)
}

// FindListByUserID mocks base method
func (m *MockAccountRepository) FindListByUserID(userID string) ([]model.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindListByUserID", userID)
	ret0, _ := ret[0].([]model.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindListByUserID indicates an expected call of FindListByUserID
func (mr *MockAccountRepositoryMockRecorder) FindListByUserID(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindListByUserID", reflect.TypeOf((*MockAccountRepository)(nil).FindListByUserID), userID)
}

// FindByID mocks base method
func (m *MockAccountRepository) FindByID(id string) (*model.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", id)
	ret0, _ := ret[0].(*model.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID
func (mr *MockAccountRepositoryMockRecorder) FindByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockAccountRepository)(nil).FindByID), id)
}

// Save mocks base method
func (m *MockAccountRepository) Save(arg0 *model.Account) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save
func (mr *MockAccountRepositoryMockRecorder) Save(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockAccountRepository)(nil).Save), arg0)
}

// Delete mocks base method
func (m *MockAccountRepository) Delete(arg0 *model.Account) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockAccountRepositoryMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockAccountRepository)(nil).Delete), arg0)
}
