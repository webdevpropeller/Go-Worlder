// Code generated by MockGen. DO NOT EDIT.
// Source: usecase/repository/brand_repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	gomock "github.com/golang/mock/gomock"
	model "go_worlder_system/domain/model"
	reflect "reflect"
)

// MockBrandRepository is a mock of BrandRepository interface
type MockBrandRepository struct {
	ctrl     *gomock.Controller
	recorder *MockBrandRepositoryMockRecorder
}

// MockBrandRepositoryMockRecorder is the mock recorder for MockBrandRepository
type MockBrandRepositoryMockRecorder struct {
	mock *MockBrandRepository
}

// NewMockBrandRepository creates a new mock instance
func NewMockBrandRepository(ctrl *gomock.Controller) *MockBrandRepository {
	mock := &MockBrandRepository{ctrl: ctrl}
	mock.recorder = &MockBrandRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBrandRepository) EXPECT() *MockBrandRepositoryMockRecorder {
	return m.recorder
}

// FindListByUserID mocks base method
func (m *MockBrandRepository) FindListByUserID(userID string) ([]model.Brand, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindListByUserID", userID)
	ret0, _ := ret[0].([]model.Brand)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindListByUserID indicates an expected call of FindListByUserID
func (mr *MockBrandRepositoryMockRecorder) FindListByUserID(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindListByUserID", reflect.TypeOf((*MockBrandRepository)(nil).FindListByUserID), userID)
}

// FindByID mocks base method
func (m *MockBrandRepository) FindByID(id string) (*model.Brand, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", id)
	ret0, _ := ret[0].(*model.Brand)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID
func (mr *MockBrandRepositoryMockRecorder) FindByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockBrandRepository)(nil).FindByID), id)
}

// Save mocks base method
func (m *MockBrandRepository) Save(arg0 *model.Brand) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save
func (mr *MockBrandRepositoryMockRecorder) Save(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockBrandRepository)(nil).Save), arg0)
}

// Update mocks base method
func (m *MockBrandRepository) Update(arg0 *model.Brand) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockBrandRepositoryMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockBrandRepository)(nil).Update), arg0)
}

// Delete mocks base method
func (m *MockBrandRepository) Delete(arg0 *model.Brand) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockBrandRepositoryMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockBrandRepository)(nil).Delete), arg0)
}

// FindLikeUserListByID mocks base method
func (m *MockBrandRepository) FindLikeUserListByID(id string) ([]model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindLikeUserListByID", id)
	ret0, _ := ret[0].([]model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindLikeUserListByID indicates an expected call of FindLikeUserListByID
func (mr *MockBrandRepositoryMockRecorder) FindLikeUserListByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindLikeUserListByID", reflect.TypeOf((*MockBrandRepository)(nil).FindLikeUserListByID), id)
}

// SaveLike mocks base method
func (m *MockBrandRepository) SaveLike(arg0 *model.Brand, arg1 *model.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveLike", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveLike indicates an expected call of SaveLike
func (mr *MockBrandRepositoryMockRecorder) SaveLike(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveLike", reflect.TypeOf((*MockBrandRepository)(nil).SaveLike), arg0, arg1)
}

// DeleteLike mocks base method
func (m *MockBrandRepository) DeleteLike(arg0 *model.Brand, arg1 *model.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLike", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLike indicates an expected call of DeleteLike
func (mr *MockBrandRepositoryMockRecorder) DeleteLike(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLike", reflect.TypeOf((*MockBrandRepository)(nil).DeleteLike), arg0, arg1)
}
