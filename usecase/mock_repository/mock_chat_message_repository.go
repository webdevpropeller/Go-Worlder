// Code generated by MockGen. DO NOT EDIT.
// Source: chat_message_repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	gomock "github.com/golang/mock/gomock"
	model "go_worlder_system/domain/model"
	reflect "reflect"
)

// MockChatMessageRepository is a mock of ChatMessageRepository interface
type MockChatMessageRepository struct {
	ctrl     *gomock.Controller
	recorder *MockChatMessageRepositoryMockRecorder
}

// MockChatMessageRepositoryMockRecorder is the mock recorder for MockChatMessageRepository
type MockChatMessageRepositoryMockRecorder struct {
	mock *MockChatMessageRepository
}

// NewMockChatMessageRepository creates a new mock instance
func NewMockChatMessageRepository(ctrl *gomock.Controller) *MockChatMessageRepository {
	mock := &MockChatMessageRepository{ctrl: ctrl}
	mock.recorder = &MockChatMessageRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockChatMessageRepository) EXPECT() *MockChatMessageRepositoryMockRecorder {
	return m.recorder
}

// FindDestinationListByUserID mocks base method
func (m *MockChatMessageRepository) FindDestinationListByUserID(arg0 string) ([]model.Profile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindDestinationListByUserID", arg0)
	ret0, _ := ret[0].([]model.Profile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindDestinationListByUserID indicates an expected call of FindDestinationListByUserID
func (mr *MockChatMessageRepositoryMockRecorder) FindDestinationListByUserID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindDestinationListByUserID", reflect.TypeOf((*MockChatMessageRepository)(nil).FindDestinationListByUserID), arg0)
}

// FindListByUserIDs mocks base method
func (m *MockChatMessageRepository) FindListByUserIDs(user1ID, user2ID string) ([]model.ChatMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindListByUserIDs", user1ID, user2ID)
	ret0, _ := ret[0].([]model.ChatMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindListByUserIDs indicates an expected call of FindListByUserIDs
func (mr *MockChatMessageRepositoryMockRecorder) FindListByUserIDs(user1ID, user2ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindListByUserIDs", reflect.TypeOf((*MockChatMessageRepository)(nil).FindListByUserIDs), user1ID, user2ID)
}

// Save mocks base method
func (m *MockChatMessageRepository) Save(arg0 *model.ChatMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save
func (mr *MockChatMessageRepositoryMockRecorder) Save(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockChatMessageRepository)(nil).Save), arg0)
}
