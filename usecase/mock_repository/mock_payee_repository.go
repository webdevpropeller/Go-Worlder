// Code generated by MockGen. DO NOT EDIT.
// Source: usecase/repository/payee_repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	gomock "github.com/golang/mock/gomock"
	model "go_worlder_system/domain/model"
	reflect "reflect"
)

// MockPayeeRepository is a mock of PayeeRepository interface
type MockPayeeRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPayeeRepositoryMockRecorder
}

// MockPayeeRepositoryMockRecorder is the mock recorder for MockPayeeRepository
type MockPayeeRepositoryMockRecorder struct {
	mock *MockPayeeRepository
}

// NewMockPayeeRepository creates a new mock instance
func NewMockPayeeRepository(ctrl *gomock.Controller) *MockPayeeRepository {
	mock := &MockPayeeRepository{ctrl: ctrl}
	mock.recorder = &MockPayeeRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPayeeRepository) EXPECT() *MockPayeeRepositoryMockRecorder {
	return m.recorder
}

// FindListByUserID mocks base method
func (m *MockPayeeRepository) FindListByUserID(userID string) ([]model.Payee, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindListByUserID", userID)
	ret0, _ := ret[0].([]model.Payee)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindListByUserID indicates an expected call of FindListByUserID
func (mr *MockPayeeRepositoryMockRecorder) FindListByUserID(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindListByUserID", reflect.TypeOf((*MockPayeeRepository)(nil).FindListByUserID), userID)
}

// FindByID mocks base method
func (m *MockPayeeRepository) FindByID(id string) (*model.Payee, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", id)
	ret0, _ := ret[0].(*model.Payee)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID
func (mr *MockPayeeRepositoryMockRecorder) FindByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockPayeeRepository)(nil).FindByID), id)
}

// Save mocks base method
func (m *MockPayeeRepository) Save(arg0 *model.Payee) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save
func (mr *MockPayeeRepositoryMockRecorder) Save(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockPayeeRepository)(nil).Save), arg0)
}

// Update mocks base method
func (m *MockPayeeRepository) Update(arg0 *model.Payee) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockPayeeRepositoryMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockPayeeRepository)(nil).Update), arg0)
}

// Delete mocks base method
func (m *MockPayeeRepository) Delete(arg0 *model.Payee) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockPayeeRepositoryMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockPayeeRepository)(nil).Delete), arg0)
}
