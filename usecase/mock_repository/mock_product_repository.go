// Code generated by MockGen. DO NOT EDIT.
// Source: usecase/repository/product_repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	gomock "github.com/golang/mock/gomock"
	model "go_worlder_system/domain/model"
	reflect "reflect"
)

// MockProductRepository is a mock of ProductRepository interface
type MockProductRepository struct {
	ctrl     *gomock.Controller
	recorder *MockProductRepositoryMockRecorder
}

// MockProductRepositoryMockRecorder is the mock recorder for MockProductRepository
type MockProductRepositoryMockRecorder struct {
	mock *MockProductRepository
}

// NewMockProductRepository creates a new mock instance
func NewMockProductRepository(ctrl *gomock.Controller) *MockProductRepository {
	mock := &MockProductRepository{ctrl: ctrl}
	mock.recorder = &MockProductRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockProductRepository) EXPECT() *MockProductRepositoryMockRecorder {
	return m.recorder
}

// RetrieveListByCategoryIDAndKeyWord mocks base method
func (m *MockProductRepository) RetrieveListByCategoryIDAndKeyWord(categoryID, keyword string) ([]model.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RetrieveListByCategoryIDAndKeyWord", categoryID, keyword)
	ret0, _ := ret[0].([]model.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveListByCategoryIDAndKeyWord indicates an expected call of RetrieveListByCategoryIDAndKeyWord
func (mr *MockProductRepositoryMockRecorder) RetrieveListByCategoryIDAndKeyWord(categoryID, keyword interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveListByCategoryIDAndKeyWord", reflect.TypeOf((*MockProductRepository)(nil).RetrieveListByCategoryIDAndKeyWord), categoryID, keyword)
}

// FindListByUserID mocks base method
func (m *MockProductRepository) FindListByUserID(userID string) ([]model.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindListByUserID", userID)
	ret0, _ := ret[0].([]model.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindListByUserID indicates an expected call of FindListByUserID
func (mr *MockProductRepositoryMockRecorder) FindListByUserID(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindListByUserID", reflect.TypeOf((*MockProductRepository)(nil).FindListByUserID), userID)
}

// FindListByBrandID mocks base method
func (m *MockProductRepository) FindListByBrandID(brandID string) ([]model.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindListByBrandID", brandID)
	ret0, _ := ret[0].([]model.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindListByBrandID indicates an expected call of FindListByBrandID
func (mr *MockProductRepositoryMockRecorder) FindListByBrandID(brandID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindListByBrandID", reflect.TypeOf((*MockProductRepository)(nil).FindListByBrandID), brandID)
}

// FindByID mocks base method
func (m *MockProductRepository) FindByID(id string) (*model.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", id)
	ret0, _ := ret[0].(*model.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID
func (mr *MockProductRepositoryMockRecorder) FindByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockProductRepository)(nil).FindByID), id)
}

// Create mocks base method
func (m *MockProductRepository) Create(product *model.Product, isDraft bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", product, isDraft)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockProductRepositoryMockRecorder) Create(product, isDraft interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockProductRepository)(nil).Create), product, isDraft)
}

// Update mocks base method
func (m *MockProductRepository) Update(product *model.Product) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", product)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockProductRepositoryMockRecorder) Update(product interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockProductRepository)(nil).Update), product)
}

// UpdateInventory mocks base method
func (m *MockProductRepository) UpdateInventory(product *model.Product) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInventory", product)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateInventory indicates an expected call of UpdateInventory
func (mr *MockProductRepositoryMockRecorder) UpdateInventory(product interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInventory", reflect.TypeOf((*MockProductRepository)(nil).UpdateInventory), product)
}

// UpdateManagement mocks base method
func (m *MockProductRepository) UpdateManagement(product *model.Product) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateManagement", product)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateManagement indicates an expected call of UpdateManagement
func (mr *MockProductRepositoryMockRecorder) UpdateManagement(product interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateManagement", reflect.TypeOf((*MockProductRepository)(nil).UpdateManagement), product)
}

// Delete mocks base method
func (m *MockProductRepository) Delete(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockProductRepositoryMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockProductRepository)(nil).Delete), id)
}

// DeleteListByBrandID mocks base method
func (m *MockProductRepository) DeleteListByBrandID(brandID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteListByBrandID", brandID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteListByBrandID indicates an expected call of DeleteListByBrandID
func (mr *MockProductRepositoryMockRecorder) DeleteListByBrandID(brandID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteListByBrandID", reflect.TypeOf((*MockProductRepository)(nil).DeleteListByBrandID), brandID)
}
