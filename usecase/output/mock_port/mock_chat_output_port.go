// Code generated by MockGen. DO NOT EDIT.
// Source: chat_output_port.go

// Package mock_outputport is a generated GoMock package.
package mock_outputport

import (
	gomock "github.com/golang/mock/gomock"
	model "go_worlder_system/domain/model"
	outputdata "go_worlder_system/usecase/output/data"
	reflect "reflect"
)

// MockChatOutputPort is a mock of ChatOutputPort interface
type MockChatOutputPort struct {
	ctrl     *gomock.Controller
	recorder *MockChatOutputPortMockRecorder
}

// MockChatOutputPortMockRecorder is the mock recorder for MockChatOutputPort
type MockChatOutputPortMockRecorder struct {
	mock *MockChatOutputPort
}

// NewMockChatOutputPort creates a new mock instance
func NewMockChatOutputPort(ctrl *gomock.Controller) *MockChatOutputPort {
	mock := &MockChatOutputPort{ctrl: ctrl}
	mock.recorder = &MockChatOutputPortMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockChatOutputPort) EXPECT() *MockChatOutputPortMockRecorder {
	return m.recorder
}

// IndexDestination mocks base method
func (m *MockChatOutputPort) IndexDestination(arg0 []model.Profile) []outputdata.PublicUser {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IndexDestination", arg0)
	ret0, _ := ret[0].([]outputdata.PublicUser)
	return ret0
}

// IndexDestination indicates an expected call of IndexDestination
func (mr *MockChatOutputPortMockRecorder) IndexDestination(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IndexDestination", reflect.TypeOf((*MockChatOutputPort)(nil).IndexDestination), arg0)
}

// Show mocks base method
func (m *MockChatOutputPort) Show(arg0 []model.ChatMessage) []outputdata.ChatMessage {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Show", arg0)
	ret0, _ := ret[0].([]outputdata.ChatMessage)
	return ret0
}

// Show indicates an expected call of Show
func (mr *MockChatOutputPortMockRecorder) Show(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Show", reflect.TypeOf((*MockChatOutputPort)(nil).Show), arg0)
}

// Send mocks base method
func (m *MockChatOutputPort) Send(arg0 *model.ChatMessage) *outputdata.ChatMessage {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(*outputdata.ChatMessage)
	return ret0
}

// Send indicates an expected call of Send
func (mr *MockChatOutputPortMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockChatOutputPort)(nil).Send), arg0)
}
