package controller

import (
	"go_worlder_system/errs"
	"go_worlder_system/interface/gateway/database"
	"go_worlder_system/interface/presenter"
	inputdata "go_worlder_system/usecase/input/data"
	inputport "go_worlder_system/usecase/input/port"
	"go_worlder_system/usecase/interactor"
	"net/http"
	"strconv"

	log "github.com/sirupsen/logrus"
)

// productParam ...
type productParam struct {
	BrandID     string
	Name        string
	CategoryID  string
	GenreID     string
	Price       string
	Image       string
	Stock       string
	Description string
	IsDraft     string
}

// ProductController ...
type ProductController struct {
	inputport inputport.ProductInputPort
	param     *productParam
}

// NewProductController ...
func NewProductController(sqlHandler database.SQLHandler) *ProductController {
	param := &productParam{}
	initializeParam(param)
	return &ProductController{
		inputport: interactor.NewProductInteractor(
			presenter.NewProductPresenter(),
			database.NewUserDatabase(sqlHandler),
			database.NewProductDatabase(sqlHandler),
			database.NewBrandDatabase(sqlHandler),
			database.NewCategoryDatabase(sqlHandler),
		),
		param: param,
	}
}

// Index ...
// @summary Display products of user
// @description Display products of the user
// @tags Product
// @produce json
// @param Authorization header string true "jwt token"
// @success 200 {array} outputdata.Product
// @failure 404 {string} string "Product list is not found"
// @router /products [get]
func (controller *ProductController) Index(c Context) error {
	userID := c.UserID()
	productList, err := controller.inputport.Index(userID)
	if err != nil {
		log.WithFields(log.Fields{}).Error(err)
		c.String(statusCode(err), errs.Cause(err).Error())
		return err
	}
	return c.JSON(http.StatusOK, productList)
}

// Show ...
// @summary Display a product of user
// @description Display a product got by the id
// @tags Product
// @produce json
// @param Authorization header string true "jwt token"
// @param id path string true "Product ID"
// @success 200 {object} outputdata.Product "Product"
// @failure 404 {string} string "The product is not found"
// @router /products/{id} [get]
func (controller *ProductController) Show(c Context) error {
	id := c.Param(idParam)
	product, err := controller.inputport.Show(id)
	if err != nil {
		log.WithFields(log.Fields{}).Error(err)
		c.String(statusCode(err), errs.Cause(err).Error())
		return err
	}
	return c.JSON(http.StatusOK, product)
}

// New ...
// @summary Display product register page
// @description Display page for creating a new product
// @tags Product
// @produce json
// @param Authorization header string true "jwt token"
// @success 200
// @router /products/new [get]
func (controller *ProductController) New(c Context) error {
	return c.JSON(http.StatusOK, nil)
}

// Edit ...
// @summary Display edit page of a product
// @description Display edit page of a product got by the id
// @tags Product
// @produce json
// @param Authorization header string true "jwt token"
// @param id path string true "Product ID"
// @success 200 {object} outputdata.Product "product"
// @failure 404 {string} string "The user can't get the product"
// @router /products/{id}/edit [get]
func (controller *ProductController) Edit(c Context) error {
	id := c.Param(idParam)
	userID := c.UserID()
	product, err := controller.inputport.Edit(id, userID)
	if err != nil {
		log.WithFields(log.Fields{}).Error(err)
		c.String(statusCode(err), errs.Cause(err).Error())
		return err
	}
	return c.JSON(http.StatusOK, product)
}

// Create ...
// @summary Register a new product
// @description Register a new product. ID is generated by random string generation
// @tags Product
// @accept mpfd
// @produce json
// @param Authorization header string true "jwt token"
// @param brand-id formData string true "brand id"
// @param name formData string true "product name"
// @param category-id formData int true "category id: min=1, max=1"
// @param genre-id formData int false "genre id"
// @param price formData int true "price"
// @param image formData file false "product imgage name"
// @param description formData string false "description"
// @param is-draft formData boolean true "draft or not"
// @success 200 {string} outputdata.Product "product"
// @failure 409 {string} string "The user can't register a product"
// @router /products [post]
func (controller *ProductController) Create(c Context) error {
	userID := c.UserID()
	brandID := c.FormValue(controller.param.BrandID)
	name := c.FormValue(controller.param.Name)
	categoryID, err := strconv.ParseUint(c.FormValue(controller.param.CategoryID), 10, 64)
	if err != nil {
		log.WithFields(log.Fields{}).Error(err)
		c.String(statusCode(err), errs.Cause(err).Error())
		return err
	}
	genreID, _ := strconv.ParseUint(c.FormValue(controller.param.GenreID), 10, 64)
	price, err := strconv.ParseUint(c.FormValue(controller.param.Price), 10, 64)
	if err != nil {
		log.WithFields(log.Fields{}).Error(err)
		c.String(statusCode(err), errs.Cause(err).Error())
		return err
	}
	if err != nil {
		log.WithFields(log.Fields{}).Error(err)
		c.String(statusCode(err), errs.Cause(err).Error())
		return err
	}
	image, _ := c.FormFile(controller.param.Image)
	description := c.FormValue(controller.param.Description)
	isDraft, err := strconv.ParseBool(c.FormValue(controller.param.IsDraft))
	if err != nil {
		log.WithFields(log.Fields{}).Error(err)
		c.String(statusCode(err), errs.Cause(err).Error())
		return err
	}
	iProduct := &inputdata.Product{
		UserID:      userID,
		BrandID:     brandID,
		Name:        name,
		CategoryID:  uint(categoryID),
		GenreID:     uint(genreID),
		Price:       uint(price),
		Image:       image,
		Description: description,
		IsDraft:     isDraft,
	}
	iNewProduct := &inputdata.NewProduct{Product: iProduct}
	err = controller.inputport.Create(iNewProduct)
	if err != nil {
		log.WithFields(log.Fields{}).Error(err)
		c.String(statusCode(err), errs.Cause(err).Error())
		return err
	}
	return c.JSON(http.StatusOK, iProduct)
}

// Update ...
// @summary Edit a product
// @description Edit a product got by the product id
// @tags Product
// @accept mpfd
// @produce json
// @param Authorization header string true "jwt token"
// @param id path string true "product id"
// @param brand-id formData string true "brand id"
// @param name formData string true "product name"
// @param category-id formData int true "category id: min=1, max=1"
// @param genre-id formData int false "genre id"
// @param price formData int true "price"
// @param image formData file false "product Imgage name"
// @param description formData string false "description"
// @param is-draft formData boolean true "draft or not"
// @success 200 {object} outputdata.Product "product"
// @failure 409 {string} string "Cannot edit a product"
// @router /products/{id} [patch]
func (controller *ProductController) Update(c Context) error {
	id := c.Param(idParam)
	userID := c.UserID()
	brandID := c.FormValue(controller.param.BrandID)
	name := c.FormValue(controller.param.Name)
	categoryID, err := strconv.ParseUint(c.FormValue(controller.param.CategoryID), 10, 64)
	if err != nil {
		log.WithFields(log.Fields{}).Error(err)
		c.String(statusCode(err), errs.Cause(err).Error())
		return err
	}
	genreID, _ := strconv.ParseUint(c.FormValue(controller.param.GenreID), 10, 64)
	if err != nil {
		log.WithFields(log.Fields{}).Error(err)
		c.String(statusCode(err), errs.Cause(err).Error())
		return err
	}
	price, err := strconv.Atoi(c.FormValue(controller.param.Price))
	if err != nil {
		log.WithFields(log.Fields{}).Error(err)
		c.String(statusCode(err), errs.Cause(err).Error())
		return err
	}
	image, _ := c.FormFile(controller.param.Image)
	description := c.FormValue(controller.param.Description)
	isDraft, err := strconv.ParseBool(c.FormValue(controller.param.IsDraft))
	if err != nil {
		log.WithFields(log.Fields{}).Error(err)
		c.String(statusCode(err), errs.Cause(err).Error())
		return err
	}
	product := &inputdata.Product{
		UserID:      userID,
		BrandID:     brandID,
		Name:        name,
		CategoryID:  uint(categoryID),
		GenreID:     uint(genreID),
		Price:       uint(price),
		Image:       image,
		Description: description,
		IsDraft:     isDraft,
	}
	updatedProduct := &inputdata.UpdatedProduct{
		ID:      id,
		Product: product,
	}
	err = controller.inputport.Update(updatedProduct)
	if err != nil {
		log.WithFields(log.Fields{}).Error(err)
		c.String(statusCode(err), errs.Cause(err).Error())
		return err
	}
	return c.JSON(http.StatusOK, product)
}

// Delete ...
// @summary Delete a product
// @description DDelete a product got by the id
// @tags Product
// @produce json
// @param Authorization header string true "jwt token"
// @param id path string true "Product ID"
// @success 200
// @failure 409 {string} string "The user can't delete a product"
// @router /products/{id} [delete]
func (controller *ProductController) Delete(c Context) error {
	id := c.Param(idParam)
	userID := c.UserID()
	err := controller.inputport.Delete(id, userID)
	if err != nil {
		log.WithFields(log.Fields{}).Error(err)
		c.String(statusCode(err), errs.Cause(err).Error())
		return err
	}
	return c.JSON(http.StatusOK, nil)
}
