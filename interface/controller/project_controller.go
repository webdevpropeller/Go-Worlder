package controller

import (
	"go_worlder_system/errs"
	"go_worlder_system/interface/gateway/database"
	"go_worlder_system/interface/presenter"
	inputdata "go_worlder_system/usecase/input/data"
	inputport "go_worlder_system/usecase/input/port"
	"go_worlder_system/usecase/interactor"
	"log"
	"net/http"
)

// projectParam ...
type projectParam struct {
	Name    string
	IsDraft string
}

// ProjectController ...
type ProjectController struct {
	inputport inputport.ProjectInputPort
	param     *projectParam
}

// NewProjectController ...
func NewProjectController(sqlHandler database.SQLHandler) *ProjectController {
	param := &projectParam{}
	initializeParam(param)
	return &ProjectController{
		inputport: interactor.NewProjectInteractor(
			presenter.NewProjectPresenter(),
			database.NewUserDatabase(sqlHandler),
			database.NewProjectDatabase(sqlHandler),
		),
		param: param,
	}
}

// Index ...
// @summary Display projects of user
// @description Display projects of the user
// @tags Project
// @produce json
// @param Authorization header string true "jwt token"
// @success 200 {array} outputdata.Project
// @failure 404 {string} string "Project list is not found"
// @router /projects [get]
func (controller *ProjectController) Index(c Context) error {
	userID := c.UserID()
	projectList, err := controller.inputport.Index(userID)
	if err != nil {
		log.Println(err)
		c.String(statusCode(err), errs.Cause(err).Error())
	}
	return c.JSON(http.StatusOK, projectList)
}

// Show ...
// @summary Display a project of user
// @description Display a project got by the id
// @tags Project
// @produce json
// @param Authorization header string true "jwt token"
// @param id path string true "Project ID"
// @success 200 {object} outputdata.Project "Project"
// @failure 404 {string} string "The project is not found"
// @router /projects/{id} [get]
func (controller *ProjectController) Show(c Context) error {
	id := c.Param(idParam)
	project, err := controller.inputport.Show(id)
	if err != nil {
		log.Println(err)
		c.String(statusCode(err), errs.Cause(err).Error())
		return err
	}
	return c.JSON(http.StatusOK, project)
}

// New ...
// @summary Display project register page
// @description Display page for creating a new project
// @tags Project
// @produce json
// @param Authorization header string true "jwt token"
// @success 200
// @router /projects/new [get]
func (controller *ProjectController) New(c Context) error {
	return c.JSON(http.StatusOK, nil)
}

// Edit ...
// @summary Display edit page of a project
// @description Display edit page of a project got by the id
// @tags Project
// @produce json
// @param Authorization header string true "jwt token"
// @param id path string true "Project ID"
// @success 200 {object} outputdata.Project "project"
// @failure 404 {string} string "The user can't get the product"
// @router /projects/{id}/edit [get]
func (controller *ProjectController) Edit(c Context) error {
	id := c.Param(idParam)
	userID := c.UserID()
	project, err := controller.inputport.Edit(id, userID)
	if err != nil {
		c.String(statusCode(err), errs.Cause(err).Error())
		return err
	}
	return c.JSON(http.StatusOK, project)
}

// Create ...
// @summary Create a new project
// @description Create a new project. ID is generated by random string generation
// @tags Project
// @accept mpfd
// @produce json
// @param Authorization header string true "jwt token"
// @param name formData string true "project name"
// @success 200 {string} outputdata.Brand "brand"
// @failure 409 {string} string "The user can't register a project"
// @router /projects [post]
func (controller *ProjectController) Create(c Context) error {
	userID := c.UserID()
	name := c.FormValue(controller.param.Name)
	iProject := &inputdata.Project{
		UserID: userID,
		Name:   name,
	}
	iNewProject := &inputdata.NewProject{Project: iProject}
	err := controller.inputport.Create(iNewProject)
	if err != nil {
		c.String(statusCode(err), errs.Cause(err).Error())
		return err
	}
	return c.JSON(http.StatusOK, iProject)
}

// Update ...
// @summary Edit a project
// @description Update a project got by the id
// @tags Project
// @accept mpfd
// @produce json
// @param Authorization header string true "jwt token"
// @param id path string true "Project ID"
// @param name formData string true "Project Name"
// @success 200 {object} outputdata.Project "project"
// @failure 409 {string} string "The user can't edit the project"
// @router /projects/{id} [patch]
func (controller *ProjectController) Update(c Context) error {
	id := c.Param(idParam)
	userID := c.UserID()
	name := c.FormValue(controller.param.Name)
	iProject := &inputdata.Project{
		UserID: userID,
		Name:   name,
	}
	iUpdatedProject := &inputdata.UpdatedProject{
		ID:      id,
		Project: iProject,
	}
	err := controller.inputport.Update(iUpdatedProject)
	if err != nil {
		log.Println(err)
		c.String(statusCode(err), errs.Cause(err).Error())
		return err
	}
	return c.JSON(http.StatusOK, iProject)
}

// Delete ...
// @summary Delete a project
// @description Delete a project got by the id
// @tags Project
// @produce json
// @param Authorization header string true "jwt token"
// @param id path string true "Project ID"
// @success 200
// @failure 409 {string} string "The user can't delete the project"
// @router /projects/{id} [delete]
func (controller *ProjectController) Delete(c Context) error {
	id := c.Param(idParam)
	userID := c.UserID()
	err := controller.inputport.Delete(id, userID)
	if err != nil {
		log.Println(err)
		c.String(statusCode(err), errs.Cause(err).Error())
		return err
	}
	return c.JSON(http.StatusOK, nil)
}
